<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../texml2html.xsl"?>
<log xmlns:xi="http://www.w3.org/2003/XInclude" title="プログラミング" by="" slide="1" embed="1" bib="slide-prog" biball="1">
<article>
<s h="プログラミング">
<frame title="\insertsection">
<multicols>
<column width="6cm">
<block class="alert" title="プログラム">
	実行すべき<alert>命令を書き並べた</alert>もの
	<ul>
		<li mark="※"><em>プログラミング</em><br/>プログラムを作成すること</li>
	</ul>
</block>
</column>
<column width="5cm">
<block title="例: 式典のプログラム">
	<ol>
		<li>開式の辞</li>
		<li>校歌</li>
		<li>校長式辞</li>
		<li>閉式の辞</li>
	</ol>
</block>
</column>
</multicols>

<multicols num="2">
<img src="turing.jpg" scale=".15" title="アラン・チューリング" n="fig:turing"/>
<img src="neumann.jpg" scale=".25" title="フォン・ノイマン" n="fig:neumann"/>
</multicols>

<!--<block title="号令のプログラム">
	<ul>
		<li>起立</li>
		<li>気をつけ</li>
		<li>礼</li>
		<li>着席</li>
	</ul>
</block>-->
</frame>

<frame title="\insertsection">
<block class="alert" title="オブジェクト指向プログラミング">
	互いに<em>メッセージ</em>を送る<alert>オブジェクト</alert>の集まりとしてプログラムを作成
</block>

<img src="msg-car.svg" scale=".7" title="自動運転でのメッセージ交換" n="fig:msg-car"/>
</frame>

<frame title="\insertsection">
<block title="実習: 自動運転">
	順次、選択、反復を用いた自動運転プログラムの作成
</block>
<img src="car.png" scale=".4" title="自動運転プログラム" n="fig:drive"/>
</frame>

<frame title="\insertsection">
<block class="alert" title="アルゴリズム">
	<alert>問題を解く手順</alert>のこと
	<ul>
		<li mark="※"><em>フローチャート</em>(流れ図): アルゴリズムを図形と線で記述した図</li>
	</ul>
</block>
</frame>

<frame title="\insertsection">
<block title="アルゴリズムの基本構造">
	<multicols num="3">
	<ul>
		<li><alert>順次(逐次)</alert><br/>
			命令を<em>1つずつ順に</em>、$s_1$の次に$s_2$を実行する<br/></li>
		<li><alert>選択(条件分岐)</alert><br/>
			条件$P$が真なら$s_1$、偽なら$s_2$と実行する<em>命令を選ぶ</em></li>
		<li><alert>反復(繰り返し)</alert><br/>
			条件$P$が真である限り<em>命令$s_1$を繰り返す</em></li>
	</ul>
	</multicols>
	<img src="flow.svg" scale=".7" title="フローチャートの記号" n="fig:flow"/>
</block>
</frame>

<frame title="\insertsection">
<block title="例1: 左右に進み続けるプログラム">
	左のプログラムをフローチャートで表すと、右のようになる
</block>
<multicols>
<column width="6cm">
	<img src="walk.png" title="プログラム"/>
</column>
<column width="6cm">
	<img src="walk.svg" scale=".5" title="フローチャート"/>
</column>
</multicols>
</frame>

<frame title="\insertsection">
<multicols>
<column width="5cm">
<block title="例2: 自動運転" xml:id="drive">
	自動運転のアルゴリズムを、フローチャートで表す
	<ul>
		<li mark="※">順次、選択、反復をすべて用いる</li>
	</ul>
</block>
</column>
<column width="7cm">
	<img src="car-empty.svg" scale=".5" title="自動運転"/>
</column>
</multicols>
</frame>

<frame title="\insertsection">
<multicols>
<column width="5cm">
<xi:include xpointer="xpointer(id('drive'))"/>
</column>
<column width="7cm">
	<img src="car.svg" scale=".5" title="自動運転"/>
</column>
</multicols>
</frame>

<frame title="\insertsection">
<multicols>
<column width="7cm">
<block title="例3: 自然数$p$の素数判定" xml:id="prime">
	<ol>
		<li>$p = 1$なら$p$は素数でないので終了する</li>
		<li>変数$n$に2を<em>代入</em>する<br/>
			(代入文は$n = 2$のように表す)</li>
		<li>$n$が$p$より小さければ次の命令を実行
			<ol>
				<li>もし$p$が$n$で割り切れたら、$p$は合成数なので終了する</li>
				<li>(そうでなければ、)nに1を加える</li>
				<li>(3)へ戻る</li>
			</ol>
		</li>
		<li>($n = p$より)$p$は素数だと分かったので終了する</li>
	</ol>
</block>
</column>
<column width="5cm">
	<img src="prime-empty.svg" scale=".5" title="素数判定" n="fig:prime-empty"/>
</column>
</multicols>
</frame>

<frame title="\insertsection">
<multicols>
<column width="7cm">
<xi:include xpointer="xpointer(id('prime'))"/>
</column>
<column width="5cm">
	<img src="prime.svg" scale=".5" title="素数判定" n="fig:prime"/>
</column>
</multicols>
</frame>

<frame title="\insertsection">
<multicols>
<column width="7cm">
<block title="Pythonでのプログラム例">
	<code src="prime.py"/>
</block>
</column>
<column width="5cm">
	<img src="prime.svg" scale=".5"/>
</column>
</multicols>
</frame>

<frame title="\insertsection">
<multicols>
<column width="7cm">
<block title="Scratchでのプログラム例">
	<img src="prime-scratch.png" scale=".4"/>
</block>
</column>
<column width="5cm">
	<img src="prime.svg" scale=".5"/>
</column>
</multicols>
</frame>

<frame title="\insertsection">
<multicols>
<column width="7cm">
<block title="例3: 郵便物を受け取る">
「郵便受けを見てきて!」という指示には、<br/>
「
<ol>
	<li>郵便受けのある<em>玄関まで行く</em></li>
	<li>郵便受けの<em>フタを開ける</em></li>
	<li>郵便受けの中に<br/>
		<em>郵便物が入っているか確認</em>する</li>
	<li>もし<em>郵便物が入っていたら</em>、<br/>
		<em>それを取り出す</em></li>
	<li>郵便受けの<em>フタを閉める</em></li>
	<li>居間へ戻ってくる</li>
</ol>
…ということをしてほしい」<br/>
という<alert>極めて複雑</alert>な意味がある
</block>
</column>
<column width="5cm">
	<img src="post.svg" scale=".45" n="fig:post" xml:id="fig-post"/>
</column>
</multicols>
</frame>

<frame title="\insertsection">
<block class="example" title="参考: 自閉スペクトラム障害(ASD)">
他人との<em>社会的関係の形成の困難さ</em>、<em>言葉の発達の遅れ</em>、興味や関心が狭く<em>特定のものにこだわる</em>ことを特徴とする行動の障害
<ul>
	<li mark="※">以前「自閉症」「アスペルガー症候群」と呼ばれていたもの</li>
</ul>
</block>

<block class="example" title="ASDの人の特徴">
<ul>
	<li>言葉の<em>裏の意味・皮肉</em>を理解しにくい</li>
	<li><em>曖昧な(不明瞭な・一貫性のない)指示</em>を理解しにくい</li>
	<li><em>暗黙のルール</em>(いわゆる「<em>常識</em>」)が分かりにくい</li>
	<li>人の言うことを<em>鵜呑み</em>にしてしまう・<em>騙され</em>やすい</li>
	<li><em>複数の答え</em>がある質問に答えにくい</li>
</ul>
<size size="small">出典:<a href="http://asperger.nerim.info">「アスペな大人」</a></size>
</block>
</frame>

<frame title="\insertsection">
<multicols>
<column width="7cm">
<block title="ASDの人とのコミュニケーション例">
「郵便受けを見てきて!」と指示すると、
<ul>
	<li><alert>「郵便受けを見てきて!」</alert><br/>→ (玄関へ) →<em>「見てきたよ!」</em></li>
	<li mark="⇨"><alert>「何か入っていた?」</alert><em>「?」</em></li>
	<li><alert>「郵便受けの中に何か<br/>
		入っていないか確認してきて!」</alert><br/>
		→ (玄関へ)<br/>
		→ <em>「新聞が入っていたよ!」</em></li>
	<li mark="⇨"><alert>「新聞は?」</alert><em>「?」</em></li>
	<li><alert>「郵便受けに入っていた<br/>
		新聞を取ってきて!」</alert><br/>
		→ (玄関へ)<br/>
		→<em>「取ってきたよ!」</em></li>
</ul>
</block>
</column>
<column width="5cm">
	<xi:include xpointer="xpointer(id('fig-post'))"/>
</column>
</multicols>
</frame>
</s>

<s h="モデル化">
<frame title="\insertsection">
<block class="alert" title="モデル(model)">
	現実の現象から<ruby r="じょうちょう">冗長</ruby>な部分を除き、<em>本質的な部分のみに単純化</em>(<alert>抽象化</alert>)したもの
	<ul>
		<li mark="※"><alert>モデル化(modeling)</alert>: モデルを作成すること</li>
	</ul>
</block>

<block title="モデル化の利点">
	<ul>
		<li>似た現象を同じ考え方で考察できるようになる</li>
		<li><alert>現象の本質的な理解や分析が容易に</alert>なる</li>
		<li><em>現象を擬似的に再現</em>(<alert>シミュレーション</alert>)できる</li>
	</ul>
</block>
</frame>

<frame title="\insertsection">
<block title="モデルの妥当さ">
	<em>何を現象の「本質」だと捉えるか</em>により、「良い」モデルは異なる
	<ul>
		<li><em>何を選び何を捨てるか</em>は、モデル作成の目的により変わる</li>
		<li>現象のどの部分に<alert>意味</alert>を見出すかは、機械には判断できない</li>
	</ul>
</block>
</frame>
</s>

<s h="表計算">
<s h="表">
<frame title="\insertsubsection">
<block title="表" class="alert">
	<em>縦方向</em>の<alert>行</alert>($1, 2, \cdots$)と、<em>横方向</em>の<alert>列</alert>($A, B, \cdots$)で定まる<alert>セル(cell)</alert>からなる
</block>
<img src="excel-cell.png" scale=".5" n="fig:excel-cell"/>
</frame>

<frame title="\insertsubsection">
<block title="数式">
	数式は「=」で始める
	<m>
	=3+2 \\
	=3*2 \\
	=3/2
	</m>
</block>
</frame>

<frame title="\insertsubsection">
<block title="セルのコピー">
	右下隅の「■」をドラッグする
</block>
<multicols num="2">
	<img src="excel-copy1.png" n="fig:excel-copy1"/>
	<img src="excel-copy2.png" n="fig:excel-copy2"/>
</multicols>
</frame>

<frame title="\insertsubsection">
<block title="行・列の固定">
	数字orアルファベットの前に「\$」を追加する
	\[ =A\$1 * \$B2 \]
</block>
</frame>

<frame title="\insertsubsection">
<block title="実習: 九九の表" class="example">
	$1 \times 1 = 1, \cdots, 9 \times 9 = 81$までの積の表を作成する
</block>
<img src="excel-multiply.png" scale=".6" n="fig:excel-multiply"/>
</frame>
</s>

<s h="関数">
<frame title="\insertsubsection">
<block title="関数" class="alert">
	<ruby r="ひきすう"><alert>引数</alert></ruby>を受け取り値を返す
	\[ \text{関数名}(\text{引数1}, \text{引数2}, \cdots) \]
</block>
</frame>

<frame title="\insertsubsection">
<block title="平方根: sqrt関数">
	引数の(正の)<alert>平方根</alert>(<em>sq</em>uare <em>r</em>oo<em>t</em>)を返す
	\[ \text{sqrt}(4) = 2 \]
</block>

<block title="余り: mod関数">
	第1引数を第2引数で割った<alert>余り</alert>(<em>mod</em>ular)を返す
	\[ \text{mod}(7, 3) = 1 (7 \equiv 1 (\text{mod} 3)) \]
</block>

<block title="合計: sum関数">
	引数の<alert>合計</alert>(<em>sum</em>)を返す
	\[ \text{sum}(a1, a2) = \text{sum}(a1:a2) \]
</block>
</frame>

<frame title="\insertsubsection">
<block title="条件分岐: if関数">
	<alert>条件</alert>の真偽により返す値を変える
	\[ \text{if}(\text{条件}, \text{真のとき}, \text{偽のとき}) \]
</block>
</frame>
</s>

<s h="乱数">
<frame title="\insertsubsection">
<block title="乱数: rand関数">
	0以上1未満の<alert>乱数</alert>(<em>rand</em>om)を返す
	\[ 0 \leq \text{rand}() &lt; 1 \]
</block>

<block title="切り捨て: int関数">
	引数の<alert>整数部分</alert>(<em>int</em>eger, $[x]$)を返す
	\[ \text{int}(3.4) = 3 \]
</block>
</frame>

<frame title="\insertsubsection">
<block title="数え上げ: countif関数">
	第1引数の範囲内で第2引数の条件を満たすセルの個数を数える
	<m>
	\text{countif}(\text{対象範囲}, 50)        &amp; (\text{範囲内で値が50のセルの個数}) \\
	\text{countif}(\text{対象範囲}, "&gt;50")  &amp; (\text{範囲内で50より大きいのセルの個数}) \\
	\text{countif}(\text{対象範囲}, "&gt;=50") &amp; (\text{範囲内で50以上のセルの個数}) \\
	\text{countif}(\text{対象範囲}, "abc")     &amp; (\text{範囲内で値が文字列abcのセルの個数})
	</m>
</block>
</frame>

<frame title="\insertsubsection">
<block title="実習: サイコロの頻度分布" class="example">
	rand関数の結果をcountif関数で数え上げる
</block>
<img src="excel-aggr.png" scale=".75" n="fig:excel-aggr"/>
</frame>

<frame title="\insertsubsection">
<block title="順位: rank関数">
	第1引数の第2引数の範囲内での<alert>順位</alert>(<em>rank</em>ing)を返す
	\[ \text{rank}(\text{順位を求める数値}, \text{対象範囲}) \]
</block>

<block title="検索: vlookup関数">
	第2引数の範囲内の左端の列から第1引数の値を<alert>検索</alert>(<em>look up</em>)し、第3引数の列の値を返す
	\[ \text{vlookup}(\text{検索する値}, \text{対象範囲}, \text{取り出す列の番号}, \text{検索方法}) \]
	<ul>
		<li mark="※">「v」は垂直方向(vertical)に検索するという意味</li>
	</ul>
</block>
</frame>

<frame title="\insertsubsection">
<block title="実習: 席替えプログラム" class="example">
	rand, rank関数を組み合わせる
	<ul>
		<li mark="※">名簿の表を用意してvlookup関数を用いれば、氏名を表示可能</li>
	</ul>
</block>
<img src="excel-exchange.png" scale=".75" n="fig:excel-exchange"/>
</frame>
</s>


<s h="マクロ">
<frame title="\insertsubsection">
<block title="マクロ" class="alert">
	ユーザが行う処理を自動化
	<ul>
		<li>Excelのマクロは<em>VBA(Visual Basic for Applications)</em>という言語で記録される</li>
		<li mark="※">VBAは強力なので、通常は無効化されている</li>
	</ul>
</block>
</frame>
</s>


<s h="シミュレーション">
<frame title="\insertsubsection">
<block title="モンテカルロ法" class="alert">
	確率的な手法で近似的に解を計算する手法
	<ul>
		<li>厳密解の算出に時間を要する問題の近似解を短時間で導出可能</li>
	</ul>
</block>
</frame>

<frame title="\insertsubsection">
<multicols>
<column width="8cm">
<block title="演習: 円周率の推定" class="example">
	1辺$r$の正方形内に半径$r$、中心角$90^\circ$の扇形があるとき、
	<m>
		(\text{正方形の面積}) : (\text{扇形の面積})
		&amp;= S_1 : S_2 \\
		&amp;= r^2 : \pi r^2 \times \frac{1}{4} \\
		&amp;= 4 : \pi
	</m>
	正方形上に$N_\text{all}$個の点を蒔いたとき、$N_\text{in}$個が扇形上にあるとすると、
	\[ 4 : \pi \simeq N_\text{all} : N_\text{in} \]
	より、$\pi \simeq 4 \times \frac{N_\text{in}}{N_\text{all}}$
</block>
</column>
<column width="4cm">
<img src="monte-carlo.svg" scale=".75" n="fig:monte-carlo"/>
</column>
</multicols>
</frame>

<frame title="\insertsubsection">
<img src="monte-carlo-flow.svg" scale=".45" n="fig:monte-carlo-flow"/>
</frame>
</s>
</s>
</article>
</log>
